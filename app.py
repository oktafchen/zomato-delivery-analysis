# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jnm2_1AvsITNFosruS4B57MI-JbQ_YN0
"""
# zomato_app_tabs.py
import streamlit as st
import pandas as pd
import plotly.express as px

# =========================
# Load dataset
# =========================
@st.cache_data
def load_data():
    df = pd.read_csv("zomato_preprocessed.csv")
    return df

df = load_data()

# =========================
# Sidebar filters
# =========================
st.sidebar.header("Filters")
selected_city = st.sidebar.selectbox("Select City", options=["All"] + sorted(df['City'].unique().tolist()))
selected_cuisine = st.sidebar.selectbox("Select Cuisine", options=["All"] + sorted(df['Cuisines'].unique().tolist()))

filtered_df = df.copy()
if selected_city != "All":
    filtered_df = filtered_df[filtered_df['City'] == selected_city]
if selected_cuisine != "All":
    filtered_df = filtered_df[filtered_df['Cuisines'] == selected_cuisine]

# =========================
# Tabs
# =========================
st.title("🍽️ Zomato Insights Dashboard")

tab1, tab2, tab3, tab4, tab5 = st.tabs(
    ["📌 Overview", "📊 EDA", "🏙️ City Analysis", "🍜 Cuisine Analysis", "🗺️ Map"]
)

# =========================
# Tab 1: Overview
# =========================
with tab1:
    st.header("Dataset Overview")
    st.write(f"**Total Rows:** {df.shape[0]}, **Total Columns:** {df.shape[1]}")
    st.dataframe(df.head())
    st.markdown("""
    **Tentang Dashboard ini:**  
    Dashboard dibuat untuk menganalisis data restoran Zomato.  
    - Filter kota & cuisine tersedia di sidebar.  
    - Navigasi dengan tab untuk analisis lebih spesifik.  
    """)

# =========================
# Tab 2: EDA
# =========================
with tab2:
    st.header("Exploratory Data Analysis")
    
    fig_rating = px.histogram(filtered_df, x="Aggregate rating", nbins=20,
                              title="Distribusi Rating Restoran")
    st.plotly_chart(fig_rating)

    if "Average Cost for two" in filtered_df.columns:
        fig_price = px.histogram(filtered_df, x="Average Cost for two", nbins=30,
                                 title="Distribusi Biaya Rata-rata untuk 2 Orang")
        st.plotly_chart(fig_price)

    if "Time_taken" in filtered_df.columns:
        fig_time = px.histogram(filtered_df, x="Time_taken", nbins=20,
                                title="Distribusi Waktu Pengiriman (menit)")
        st.plotly_chart(fig_time)

# =========================
# Tab 3: City Analysis
# =========================
with tab3:
    st.header("City-wise Analysis")
    
    city_count = df['City'].value_counts().reset_index()
    city_count.columns = ['City', 'Restaurant Count']
    fig_city = px.bar(city_count.head(10), x="City", y="Restaurant Count",
                      title="Top 10 Cities by Number of Restaurants")
    st.plotly_chart(fig_city)

    city_rating = df.groupby("City")['Aggregate rating'].mean().reset_index()
    fig_city_rating = px.bar(city_rating, x="City", y="Aggregate rating",
                             title="Average Rating per City")
    st.plotly_chart(fig_city_rating)

# =========================
# Tab 4: Cuisine Analysis
# =========================
with tab4:
    st.header("Cuisine Analysis")
    
    cuisine_count = df['Cuisines'].value_counts().reset_index()
    cuisine_count.columns = ['Cuisine', 'Count']
    fig_cuisine = px.bar(cuisine_count.head(10), x="Cuisine", y="Count",
                         title="Top 10 Cuisines")
    st.plotly_chart(fig_cuisine)

    cuisine_rating = df.groupby("Cuisines")['Aggregate rating'].mean().reset_index()
    fig_cuisine_rating = px.bar(cuisine_rating.sort_values("Aggregate rating", ascending=False).head(10),
                                x="Cuisines", y="Aggregate rating",
                                title="Top 10 Cuisines by Average Rating")
    st.plotly_chart(fig_cuisine_rating)

# =========================
# Tab 5: Map
# =========================
with tab5:
    if "Latitude" in df.columns and "Longitude" in df.columns:
        st.header("Restaurant Map")
        st.map(filtered_df[['Latitude', 'Longitude']].dropna())
    else:
        st.warning("Dataset tidak memiliki kolom Latitude & Longitude.")
